/**
 * NOTE: This class is auto generated by the swagger code generator program (3.0.36).
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */
package com.mybank.account.api;

import com.mybank.account.api.model.Account;
import com.mybank.account.api.model.AccountRequest;
import com.mybank.account.api.model.Balance;
import com.mybank.account.api.model.InlineResponse200;
import com.mybank.account.api.model.Pageable;
import com.fasterxml.jackson.databind.ObjectMapper;
import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.enums.ParameterIn;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.media.ArraySchema;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.security.SecurityRequirement;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestHeader;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RequestPart;
import org.springframework.web.multipart.MultipartFile;
import org.springframework.web.bind.annotation.CookieValue;

import javax.servlet.http.HttpServletRequest;
import javax.validation.Valid;
import javax.validation.constraints.*;
import java.io.IOException;
import java.util.List;
import java.util.Map;
import java.util.Optional;

@javax.annotation.Generated(value = "io.swagger.codegen.v3.generators.java.SpringCodegen", date = "2022-12-19T12:17:19.406169+01:00[Europe/Brussels]")
@Validated
public interface AccountsApi {

    Logger log = LoggerFactory.getLogger(AccountsApi.class);

    default Optional<ObjectMapper> getObjectMapper(){
        return Optional.empty();
    }

    default Optional<HttpServletRequest> getRequest(){
        return Optional.empty();
    }

    default Optional<String> getAcceptHeader() {
        return getRequest().map(r -> r.getHeader("Accept"));
    }

    @Operation(summary = "Create an account.", description = "Create an account for an actor", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "201", description = "Account created succesfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        consumes = { "application/json" }, 
        method = RequestMethod.POST)
    default ResponseEntity<Account> createAccount(@Parameter(in = ParameterIn.DEFAULT, description = "The properties to request the creation of a bank account.", schema=@Schema()) @Valid @RequestBody AccountRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"holderName\" : \"Robert Schuman\",\n  \"balances\" : [ {\n    \"amount\" : 0.8008281904610115\n  }, {\n    \"amount\" : 0.8008281904610115\n  } ],\n  \"iban\" : \"iban\",\n  \"alias\" : \"Savings for my son\",\n  \"currency\" : \"currency\",\n  \"id\" : \"123456789012\",\n  \"type\" : {\n    \"codeListId\" : \"PA65\",\n    \"codeId\" : \"2\"\n  }\n}", Account.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccountsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get the properties of an account.", description = "Use this operation to update properties of an account.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account retrieved successfully.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = Account.class))) })
    @RequestMapping(value = "/accounts/{id}",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<Account> getAccount(@Parameter(in = ParameterIn.PATH, description = "Id of the account", required=true, schema=@Schema()) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"holderName\" : \"Robert Schuman\",\n  \"balances\" : [ {\n    \"amount\" : 0.8008281904610115\n  }, {\n    \"amount\" : 0.8008281904610115\n  } ],\n  \"iban\" : \"iban\",\n  \"alias\" : \"Savings for my son\",\n  \"currency\" : \"currency\",\n  \"id\" : \"123456789012\",\n  \"type\" : {\n    \"codeListId\" : \"PA65\",\n    \"codeId\" : \"2\"\n  }\n}", Account.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccountsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Retrieve the current balance of an account.", description = "Use this operation to retrieve the account balances.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "An array of account balances.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Balance.class)))) })
    @RequestMapping(value = "/accounts/{id}/balances",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Balance>> getAccountBalances(@Parameter(in = ParameterIn.PATH, description = "Id of the account", required=true, schema=@Schema()) @PathVariable("id") String id) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"amount\" : 0.8008281904610115\n}, {\n  \"amount\" : 0.8008281904610115\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccountsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Get the accounts transactions.", description = "Get the transactions of an account.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "Transactions" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "An array of account transactions.", content = @Content(mediaType = "application/json", schema = @Schema(implementation = InlineResponse200.class))) })
    @RequestMapping(value = "/accounts/{id}/transactions",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<InlineResponse200> getAccountTransactions(@Parameter(in = ParameterIn.PATH, description = "ID of the item to fetch", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.QUERY, description = "The start date of the transactions, maximum query interval = 7 days, if not provided date of today is returned by default." ,schema=@Schema()) @Valid @RequestParam(value = "from", required = false) String from, @Parameter(in = ParameterIn.QUERY, description = "The end date of the transactions" ,schema=@Schema()) @Valid @RequestParam(value = "to", required = false) String to, @Parameter(in = ParameterIn.QUERY, description = "Page and page size requested" ,schema=@Schema()) @Valid @RequestParam(value = "pageable", required = false) Pageable pageable) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("{\n  \"size\" : 20,\n  \"page\" : 1,\n  \"items\" : [ {\n    \"date\" : \"date\",\n    \"amount\" : 0.8008281904610115,\n    \"details\" : \"Location: The Bakery Brussels, payment with Fitbit Pay.\",\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"transactionDate\" : \"2022-09-01T00:00:00.000+00:00\",\n    \"type\" : \"debit\"\n  }, {\n    \"date\" : \"date\",\n    \"amount\" : 0.8008281904610115,\n    \"details\" : \"Location: The Bakery Brussels, payment with Fitbit Pay.\",\n    \"id\" : \"d290f1ee-6c54-4b01-90e6-d701748f0851\",\n    \"transactionDate\" : \"2022-09-01T00:00:00.000+00:00\",\n    \"type\" : \"debit\"\n  } ]\n}", InlineResponse200.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccountsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Retrieve your accounts.", description = "Use this operation to retrieve overview of your bank accounts.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "An array of accounts.", content = @Content(mediaType = "application/json", array = @ArraySchema(schema = @Schema(implementation = Account.class)))) })
    @RequestMapping(value = "/accounts",
        produces = { "application/json" }, 
        method = RequestMethod.GET)
    default ResponseEntity<List<Account>> getAccounts(@Parameter(in = ParameterIn.QUERY, description = "The Account Type differentiator (CodeId) . When not given, all account types are returned.\" Values are listed in TCOD PA65. Possible values are: - 1 = Savings - 2 = Payment           " ,schema=@Schema()) @Valid @RequestParam(value = "accountTypeCodeId", required = false) String accountTypeCodeId) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
            if (getAcceptHeader().get().contains("application/json")) {
                try {
                    return new ResponseEntity<>(getObjectMapper().get().readValue("[ {\n  \"holderName\" : \"Robert Schuman\",\n  \"balances\" : [ {\n    \"amount\" : 0.8008281904610115\n  }, {\n    \"amount\" : 0.8008281904610115\n  } ],\n  \"iban\" : \"iban\",\n  \"alias\" : \"Savings for my son\",\n  \"currency\" : \"currency\",\n  \"id\" : \"123456789012\",\n  \"type\" : {\n    \"codeListId\" : \"PA65\",\n    \"codeId\" : \"2\"\n  }\n}, {\n  \"holderName\" : \"Robert Schuman\",\n  \"balances\" : [ {\n    \"amount\" : 0.8008281904610115\n  }, {\n    \"amount\" : 0.8008281904610115\n  } ],\n  \"iban\" : \"iban\",\n  \"alias\" : \"Savings for my son\",\n  \"currency\" : \"currency\",\n  \"id\" : \"123456789012\",\n  \"type\" : {\n    \"codeListId\" : \"PA65\",\n    \"codeId\" : \"2\"\n  }\n} ]", List.class), HttpStatus.NOT_IMPLEMENTED);
                } catch (IOException e) {
                    log.error("Couldn't serialize response for content type application/json", e);
                    return new ResponseEntity<>(HttpStatus.INTERNAL_SERVER_ERROR);
                }
            }
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccountsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }


    @Operation(summary = "Update the properties of an account.", description = "Use this operation to update properties of an account.", security = {
        @SecurityRequirement(name = "basicAuth")    }, tags={ "Accounts" })
    @ApiResponses(value = { 
        @ApiResponse(responseCode = "200", description = "Account updated succesfully.") })
    @RequestMapping(value = "/accounts/{id}",
        consumes = { "application/json" }, 
        method = RequestMethod.PUT)
    default ResponseEntity<Void> updateAccount(@Parameter(in = ParameterIn.PATH, description = "Id of the account", required=true, schema=@Schema()) @PathVariable("id") String id, @Parameter(in = ParameterIn.DEFAULT, description = "The properties to request the creation of a bank account.", schema=@Schema()) @Valid @RequestBody AccountRequest body) {
        if(getObjectMapper().isPresent() && getAcceptHeader().isPresent()) {
        } else {
            log.warn("ObjectMapper or HttpServletRequest not configured in default AccountsApi interface so no example is generated");
        }
        return new ResponseEntity<>(HttpStatus.NOT_IMPLEMENTED);
    }

}

